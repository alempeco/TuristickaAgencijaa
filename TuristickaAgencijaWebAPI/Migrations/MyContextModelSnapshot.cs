// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TuristickaAgencijaWebAPI.Database;

namespace TuristickaAgencijaWebAPI.Migrations
{
    [DbContext(typeof(MyContext))]
    partial class MyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Drzave", b =>
                {
                    b.Property<int>("DrzaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DrzaveID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivDrzave")
                        .IsRequired();

                    b.HasKey("DrzaveId");

                    b.ToTable("Drzave");

                    b.HasData(
                        new { DrzaveId = 1, NazivDrzave = "Bosna i Hercegovina" },
                        new { DrzaveId = 2, NazivDrzave = "Hrvatska" },
                        new { DrzaveId = 3, NazivDrzave = "Švicarska" },
                        new { DrzaveId = 4, NazivDrzave = "Grcka" },
                        new { DrzaveId = 5, NazivDrzave = "Italija" },
                        new { DrzaveId = 6, NazivDrzave = "Spanija" },
                        new { DrzaveId = 7, NazivDrzave = "Portugal" },
                        new { DrzaveId = 8, NazivDrzave = "Francuska" }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Firme", b =>
                {
                    b.Property<int>("FirmaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FirmaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivFirme")
                        .IsRequired();

                    b.HasKey("FirmaId");

                    b.ToTable("Firme");

                    b.HasData(
                        new { FirmaId = 1, NazivFirme = "Travnik Trans" },
                        new { FirmaId = 2, NazivFirme = "Autoprevoz Mostar" },
                        new { FirmaId = 3, NazivFirme = "Globtour" },
                        new { FirmaId = 4, NazivFirme = "Airlens" }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Gradovi", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GradID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DrzaveId")
                        .HasColumnName("DrzaveID");

                    b.Property<string>("NazivGrada")
                        .IsRequired();

                    b.HasKey("GradId");

                    b.HasIndex("DrzaveId");

                    b.ToTable("Gradovi");

                    b.HasData(
                        new { GradId = 1, DrzaveId = 1, NazivGrada = "Travnik" },
                        new { GradId = 2, DrzaveId = 1, NazivGrada = "Sanski Most" },
                        new { GradId = 3, DrzaveId = 1, NazivGrada = "Turbe" },
                        new { GradId = 4, DrzaveId = 1, NazivGrada = "Sarajevo" },
                        new { GradId = 5, DrzaveId = 1, NazivGrada = "Tuzla" },
                        new { GradId = 6, DrzaveId = 1, NazivGrada = "Bihac" },
                        new { GradId = 7, DrzaveId = 1, NazivGrada = "Instabul" },
                        new { GradId = 8, DrzaveId = 1, NazivGrada = "Visoko" },
                        new { GradId = 9, DrzaveId = 2, NazivGrada = "Makarska" },
                        new { GradId = 10, DrzaveId = 3, NazivGrada = "Zürich" },
                        new { GradId = 11, DrzaveId = 1, NazivGrada = "Zenica" },
                        new { GradId = 12, DrzaveId = 1, NazivGrada = "Mostar" },
                        new { GradId = 13, DrzaveId = 1, NazivGrada = "Jajce" },
                        new { GradId = 14, DrzaveId = 4, NazivGrada = "Zakintos" },
                        new { GradId = 15, DrzaveId = 5, NazivGrada = "Palermo" },
                        new { GradId = 16, DrzaveId = 2, NazivGrada = "Tucepi" },
                        new { GradId = 17, DrzaveId = 2, NazivGrada = "Tucepi" },
                        new { GradId = 18, DrzaveId = 6, NazivGrada = "Barselona" },
                        new { GradId = 19, DrzaveId = 7, NazivGrada = "Lisabon" },
                        new { GradId = 20, DrzaveId = 8, NazivGrada = "Pariz" }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Komentari", b =>
                {
                    b.Property<int>("KomentarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("KomentarID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PutnikKorisnikId")
                        .HasColumnName("PutnikKorisnikID");

                    b.Property<int?>("PutovanjeId")
                        .HasColumnName("PutovanjeID");

                    b.Property<string>("Sadrzaj")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("Vrijeme");

                    b.HasKey("KomentarId");

                    b.HasIndex("PutnikKorisnikId");

                    b.HasIndex("PutovanjeId");

                    b.ToTable("Komentari");

                    b.HasData(
                        new { KomentarId = 1, PutnikKorisnikId = 1, PutovanjeId = 9, Sadrzaj = "Odlicno", Vrijeme = new DateTime(2021, 2, 19, 0, 45, 6, 73, DateTimeKind.Local) },
                        new { KomentarId = 2, PutnikKorisnikId = 1, PutovanjeId = 9, Sadrzaj = "Top", Vrijeme = new DateTime(2021, 2, 20, 0, 45, 6, 79, DateTimeKind.Local) },
                        new { KomentarId = 3, PutnikKorisnikId = 1, PutovanjeId = 9, Sadrzaj = "Top", Vrijeme = new DateTime(2021, 2, 20, 0, 45, 6, 79, DateTimeKind.Local) },
                        new { KomentarId = 4, PutnikKorisnikId = 1, PutovanjeId = 9, Sadrzaj = "Super putovanje ..preporuka", Vrijeme = new DateTime(2021, 2, 20, 0, 45, 6, 79, DateTimeKind.Local) },
                        new { KomentarId = 5, PutnikKorisnikId = 1, PutovanjeId = 9, Sadrzaj = "Izgleda wooow", Vrijeme = new DateTime(2021, 2, 22, 0, 45, 6, 79, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Novosti", b =>
                {
                    b.Property<int>("NovostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("NovostID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumVrijeme");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("PutovanjeId")
                        .HasColumnName("PutovanjeID");

                    b.Property<string>("Sadrzaj")
                        .IsRequired();

                    b.Property<byte[]>("Slika");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnName("ZaposlenikID");

                    b.HasKey("NovostId");

                    b.HasIndex("PutovanjeId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Novosti");

                    b.HasData(
                        new { NovostId = 1, DatumVrijeme = new DateTime(2021, 2, 19, 0, 45, 6, 80, DateTimeKind.Local), Naslov = "Vazna obavjest", PutovanjeId = 2, Sadrzaj = "Termin putovanja se pomjena sa 11h na 13h", ZaposlenikId = 1 },
                        new { NovostId = 2, DatumVrijeme = new DateTime(2021, 2, 24, 0, 45, 6, 80, DateTimeKind.Local), Naslov = "Vazna obavjest", Sadrzaj = "Sva putovavanja uslijed pogorsanja epidemioloske situacije se odgađaju do daljnjeg.", ZaposlenikId = 1 },
                        new { NovostId = 3, DatumVrijeme = new DateTime(2021, 2, 22, 0, 45, 6, 80, DateTimeKind.Local), Naslov = "Pomjera satnice za putnike u Barselonu", PutovanjeId = 2, Sadrzaj = "Pomjeranje putovanja satnice sa predviđenih 7:00h na 8:30h.", ZaposlenikId = 1 },
                        new { NovostId = 7, DatumVrijeme = new DateTime(2021, 2, 17, 0, 45, 6, 80, DateTimeKind.Local), Naslov = "Kako se obuci za putovanje", Sadrzaj = "Obuci se sto laganije za sva putovanja", ZaposlenikId = 1 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Ocjene", b =>
                {
                    b.Property<int>("OcjenaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OcjenaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Vrijednost")
                        .HasMaxLength(10);

                    b.Property<int>("VrijednostBrojcano");

                    b.HasKey("OcjenaId");

                    b.ToTable("Ocjene");

                    b.HasData(
                        new { OcjenaId = 2, Vrijednost = "Ocjena 1/5", VrijednostBrojcano = 1 },
                        new { OcjenaId = 3, Vrijednost = "Ocjena 2/5", VrijednostBrojcano = 2 },
                        new { OcjenaId = 4, Vrijednost = "Ocjena 3/5", VrijednostBrojcano = 3 },
                        new { OcjenaId = 5, Vrijednost = "Ocjena 4/5", VrijednostBrojcano = 4 },
                        new { OcjenaId = 6, Vrijednost = "Ocjena 5/5", VrijednostBrojcano = 5 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.OcjenePutovanja", b =>
                {
                    b.Property<int>("OcjenaPutovanjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OcjenaPutovanjeID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OcjenaId")
                        .HasColumnName("OcjenaID");

                    b.Property<int?>("PutnikKorisnikId")
                        .HasColumnName("PutnikKorisnikID");

                    b.Property<int?>("PutovanjeId")
                        .HasColumnName("PutovanjeID");

                    b.HasKey("OcjenaPutovanjeId");

                    b.HasIndex("OcjenaId");

                    b.HasIndex("PutnikKorisnikId");

                    b.HasIndex("PutovanjeId");

                    b.ToTable("OcjenePutovanja");

                    b.HasData(
                        new { OcjenaPutovanjeId = 1, OcjenaId = 6, PutnikKorisnikId = 1, PutovanjeId = 2 },
                        new { OcjenaPutovanjeId = 2, OcjenaId = 6, PutnikKorisnikId = 1, PutovanjeId = 9 },
                        new { OcjenaPutovanjeId = 3, OcjenaId = 6, PutnikKorisnikId = 1, PutovanjeId = 9 },
                        new { OcjenaPutovanjeId = 4, OcjenaId = 6, PutnikKorisnikId = 1, PutovanjeId = 9 },
                        new { OcjenaPutovanjeId = 5, OcjenaId = 6, PutnikKorisnikId = 1, PutovanjeId = 9 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.OnlinePay", b =>
                {
                    b.Property<int>("OnlinePayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OnlinePayID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumUplate");

                    b.Property<float>("Iznos");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired();

                    b.Property<int>("PutniciKorisniciId")
                        .HasColumnName("PutniciKorisniciID");

                    b.Property<string>("Svrha")
                        .HasMaxLength(350);

                    b.HasKey("OnlinePayId");

                    b.ToTable("OnlinePay");

                    b.HasData(
                        new { OnlinePayId = 6, DatumUplate = new DateTime(2021, 2, 23, 0, 45, 6, 82, DateTimeKind.Local), Iznos = 55f, KorisnickoIme = "amila", PutniciKorisniciId = 0, Svrha = "Instabul 16.02.2021" },
                        new { OnlinePayId = 7, DatumUplate = new DateTime(2021, 2, 23, 0, 45, 6, 83, DateTimeKind.Local), Iznos = 200f, KorisnickoIme = "amila", PutniciKorisniciId = 0, Svrha = "BanjaLuka 17.2.2020" },
                        new { OnlinePayId = 8, DatumUplate = new DateTime(2021, 3, 6, 0, 45, 6, 83, DateTimeKind.Local), Iznos = 25f, KorisnickoIme = "amila", PutniciKorisniciId = 0, Svrha = "BanjaLuka 10.02.2021" },
                        new { OnlinePayId = 9, DatumUplate = new DateTime(2021, 3, 21, 0, 45, 6, 83, DateTimeKind.Local), Iznos = 30f, KorisnickoIme = "amila", PutniciKorisniciId = 0, Svrha = "BanjaLuka 10.02.2021" }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Pretplate", b =>
                {
                    b.Property<int>("PretplataId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Aktivno");

                    b.Property<int?>("PutnikKorisnikId");

                    b.Property<int?>("VrstaPutovanjaId");

                    b.HasKey("PretplataId");

                    b.HasIndex("PutnikKorisnikId");

                    b.HasIndex("VrstaPutovanjaId");

                    b.ToTable("Pretplate");

                    b.HasData(
                        new { PretplataId = 2, PutnikKorisnikId = 1, VrstaPutovanjaId = 5 },
                        new { PretplataId = 4, PutnikKorisnikId = 1, VrstaPutovanjaId = 7 },
                        new { PretplataId = 6, PutnikKorisnikId = 1, VrstaPutovanjaId = 4 },
                        new { PretplataId = 7, PutnikKorisnikId = 1, VrstaPutovanjaId = 6 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Prevoz", b =>
                {
                    b.Property<int>("PrevozId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrevozID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrojMjesta");

                    b.Property<float>("CijenaPoMjestu");

                    b.Property<int?>("FirmaId")
                        .HasColumnName("FirmaID");

                    b.Property<int?>("TipPrevozaId")
                        .HasColumnName("TipPrevozaID");

                    b.HasKey("PrevozId");

                    b.HasIndex("FirmaId");

                    b.HasIndex("TipPrevozaId");

                    b.ToTable("Prevoz");

                    b.HasData(
                        new { PrevozId = 1, BrojMjesta = 10, CijenaPoMjestu = 10f, FirmaId = 1, TipPrevozaId = 1 },
                        new { PrevozId = 3, BrojMjesta = 50, CijenaPoMjestu = 11f, FirmaId = 2, TipPrevozaId = 1 },
                        new { PrevozId = 4, BrojMjesta = 49, CijenaPoMjestu = 10f, FirmaId = 1, TipPrevozaId = 1 },
                        new { PrevozId = 5, BrojMjesta = 120, CijenaPoMjestu = 60f, FirmaId = 3, TipPrevozaId = 1 },
                        new { PrevozId = 6, BrojMjesta = 50, CijenaPoMjestu = 50f, FirmaId = 1, TipPrevozaId = 1 },
                        new { PrevozId = 7, BrojMjesta = 10, CijenaPoMjestu = 10f, FirmaId = 2, TipPrevozaId = 1 },
                        new { PrevozId = 8, BrojMjesta = 10, CijenaPoMjestu = 10f, FirmaId = 3, TipPrevozaId = 1 },
                        new { PrevozId = 9, BrojMjesta = 49, CijenaPoMjestu = 6f, FirmaId = 1, TipPrevozaId = 1 },
                        new { PrevozId = 10, BrojMjesta = 130, CijenaPoMjestu = 150f, FirmaId = 4, TipPrevozaId = 2 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.PutniciKorisnici", b =>
                {
                    b.Property<int>("PutnikKorisnikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PutnikKorisnikID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("Kontakt")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("KorisnickoIme")
                        .HasMaxLength(50);

                    b.Property<string>("LozinkaHash");

                    b.Property<string>("LozinkaSalt");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("PutnikKorisnikId");

                    b.ToTable("PutniciKorisnici");

                    b.HasData(
                        new { PutnikKorisnikId = 1, Email = "amila.peco@gmail.com", Ime = "Amila", Kontakt = "123 456 745", KorisnickoIme = "amila", LozinkaHash = "nX3I2MXaMLX9oQegdQ6Yz31sI9Q=", LozinkaSalt = "LD4329GODyCIepothCV5HQ==", Prezime = "Peco" }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Putovanja", b =>
                {
                    b.Property<int>("PutovanjaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PutovanjaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GradId")
                        .HasColumnName("GradID");

                    b.Property<string>("Naziv");

                    b.Property<string>("Opis");

                    b.Property<int?>("PrevozId")
                        .HasColumnName("PrevozID");

                    b.Property<byte[]>("Slika");

                    b.Property<int?>("VrstaPutovanjaId")
                        .HasColumnName("VrstaPutovanjaID");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnName("ZaposlenikID");

                    b.HasKey("PutovanjaId");

                    b.HasIndex("GradId");

                    b.HasIndex("PrevozId");

                    b.HasIndex("VrstaPutovanjaId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Putovanja");

                    b.HasData(
                        new { PutovanjaId = 1, GradId = 1, Naziv = "Banja Luka", Opis = "Skolska ekskurzija u Banja Luku", PrevozId = 5, VrstaPutovanjaId = 7, ZaposlenikId = 1 },
                        new { PutovanjaId = 2, GradId = 19, Naziv = "Putovanje u Barselonu", Opis = "Super ponuda ", PrevozId = 10, VrstaPutovanjaId = 4, ZaposlenikId = 1 },
                        new { PutovanjaId = 3, GradId = 20, Naziv = "Let do Pariza", Opis = "Najnovije putovanje ", PrevozId = 10, VrstaPutovanjaId = 4, ZaposlenikId = 1 },
                        new { PutovanjaId = 4, GradId = 1, Naziv = "Obilazak grada Travnika", Opis = "Tvrđava Stari grad jedan je od najljepših i najočuvanijih fortifikacijskih objekata srednjovjekovne Bosne u kojem su naredni istorijski periodi ostavili svoja specifična obilježja", PrevozId = 9, VrstaPutovanjaId = 7, ZaposlenikId = 1 },
                        new { PutovanjaId = 5, GradId = 14, Naziv = "Vrelo Bune", Opis = "Najnovije putovanje ", PrevozId = 5, VrstaPutovanjaId = 7, ZaposlenikId = 1 },
                        new { PutovanjaId = 6, GradId = 9, Naziv = "Putovanje do Instabula", Opis = "Upoznajte Instabul ", PrevozId = 8, VrstaPutovanjaId = 4, ZaposlenikId = 1 },
                        new { PutovanjaId = 7, GradId = 9, Naziv = "Cari Instabula", Opis = "Upoznajte Instabul ", PrevozId = 8, VrstaPutovanjaId = 4, ZaposlenikId = 1 },
                        new { PutovanjaId = 8, GradId = 18, Naziv = "Ljetovanje Tucepi", Opis = "Ljepote Jadrana ", PrevozId = 3, VrstaPutovanjaId = 5, ZaposlenikId = 1 },
                        new { PutovanjaId = 9, GradId = 15, Naziv = "Ljetovanje Grcka", Opis = "Super ponuda ", PrevozId = 10, VrstaPutovanjaId = 6, ZaposlenikId = 1 },
                        new { PutovanjaId = 10, GradId = 19, Naziv = "Putovanje u Portugal", Opis = " Lisabonje poznat po svojoj kolonijalističkoj povijesti.", PrevozId = 5, VrstaPutovanjaId = 4, ZaposlenikId = 1 },
                        new { PutovanjaId = 11, GradId = 6, Naziv = "Ekskurzija školska Jajce", Opis = " Tražite istorijske spomenike? Ne samo da ih ima, već je ovo jedan od gradova sa najviše nacionalnih spomenika u BiH! Jajce ima čak 30 nacionalnih spomenika.", PrevozId = 4, VrstaPutovanjaId = 7, ZaposlenikId = 1 },
                        new { PutovanjaId = 12, GradId = 15, Naziv = "Putovanje na Siciliju", Opis = " Ne porpustite jedno od najljepsih putovanja iz nase ponude", PrevozId = 5, VrstaPutovanjaId = 6, ZaposlenikId = 1 },
                        new { PutovanjaId = 13, GradId = 4, Naziv = "Ljetovanje Makarska", Opis = " Makarska je priobalni grad u Splitsko-dalmatinskoj županiji, smješten podno planine Biokovo. Središte je Makarskog primorja (poznato pod imenom, Makarska .", PrevozId = 4, VrstaPutovanjaId = 5, ZaposlenikId = 1 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Rezervacije", b =>
                {
                    b.Property<int>("RezervacijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RezervacijaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PutnikKorisnikId")
                        .HasColumnName("PutnikKorisnikID");

                    b.Property<int>("TerminPutovanjaId")
                        .HasColumnName("TerminPutovanjaID");

                    b.Property<DateTime?>("Vrijeme");

                    b.HasKey("RezervacijaId");

                    b.HasIndex("PutnikKorisnikId");

                    b.HasIndex("TerminPutovanjaId");

                    b.ToTable("Rezervacije");

                    b.HasData(
                        new { RezervacijaId = 2, PutnikKorisnikId = 1, TerminPutovanjaId = 3, Vrijeme = new DateTime(2021, 3, 5, 0, 45, 6, 86, DateTimeKind.Local) },
                        new { RezervacijaId = 3, PutnikKorisnikId = 1, TerminPutovanjaId = 6, Vrijeme = new DateTime(2021, 3, 5, 0, 45, 6, 86, DateTimeKind.Local) },
                        new { RezervacijaId = 4, PutnikKorisnikId = 1, TerminPutovanjaId = 3, Vrijeme = new DateTime(2021, 2, 14, 0, 45, 6, 86, DateTimeKind.Local) },
                        new { RezervacijaId = 8, PutnikKorisnikId = 1, TerminPutovanjaId = 9, Vrijeme = new DateTime(2021, 2, 20, 0, 45, 6, 86, DateTimeKind.Local) },
                        new { RezervacijaId = 9, PutnikKorisnikId = 1, TerminPutovanjaId = 10, Vrijeme = new DateTime(2021, 2, 20, 0, 45, 6, 86, DateTimeKind.Local) },
                        new { RezervacijaId = 10, PutnikKorisnikId = 1, TerminPutovanjaId = 11, Vrijeme = new DateTime(2021, 2, 20, 0, 45, 6, 86, DateTimeKind.Local) },
                        new { RezervacijaId = 11, PutnikKorisnikId = 1, TerminPutovanjaId = 10, Vrijeme = new DateTime(2021, 2, 28, 0, 45, 6, 86, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Smjestaj", b =>
                {
                    b.Property<int>("SmjestajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SmjestajID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("CijenaNoc");

                    b.Property<int>("GradId")
                        .HasColumnName("GradID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Opis")
                        .IsUnicode(false);

                    b.Property<byte[]>("Slika");

                    b.Property<string>("TipSobe")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("SmjestajId");

                    b.HasIndex("GradId");

                    b.ToTable("Smjestaj");

                    b.HasData(
                        new { SmjestajId = 2, CijenaNoc = 100.0, GradId = 4, Naziv = "Hotel Nacional", Opis = "Hotel 3 zvjezdice", TipSobe = "jednokrevetne" },
                        new { SmjestajId = 11, CijenaNoc = 100.0, GradId = 1, Naziv = "Hotel Vezir Palace", Opis = "Hotel 3 zvjezdice", TipSobe = "dvokrevetna " },
                        new { SmjestajId = 12, CijenaNoc = 40.0, GradId = 9, Naziv = "Cheers Lighthouse", Opis = "Hotel 3 zvjezdice", TipSobe = "Tip " },
                        new { SmjestajId = 13, CijenaNoc = 100.0, GradId = 19, Naziv = "Hotel Rossio Garden Hotel ", Opis = "Hotel 4 zvjezdice", TipSobe = "Svi Tip " },
                        new { SmjestajId = 14, CijenaNoc = 30.0, GradId = 16, Naziv = "Phoenix Hotel  ", Opis = "Hotel 5 zvjezdice", TipSobe = "Svi Tip " },
                        new { SmjestajId = 15, CijenaNoc = 60.0, GradId = 18, Naziv = "Hotel Tamaris Tucepi  ", Opis = "Hotel 3 zvjezdice", TipSobe = "Svi Tip " },
                        new { SmjestajId = 16, CijenaNoc = 50.0, GradId = 17, Naziv = "Hotel Astoria Palace Hotel   ", Opis = "Hotel 4 zvjezdice", TipSobe = "Svi Tip " }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.TerminiPutovanja", b =>
                {
                    b.Property<int>("TerminPutovanjaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TerminPutovanjaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Aktivno");

                    b.Property<int?>("BrojMjesta");

                    b.Property<double?>("Cijena");

                    b.Property<DateTime?>("DatumPolaska");

                    b.Property<DateTime?>("DatumPovratka");

                    b.Property<int>("PutovanjeId")
                        .HasColumnName("PutovanjeID");

                    b.Property<byte[]>("Slika");

                    b.Property<int?>("SmjestajId")
                        .HasColumnName("SmjestajID");

                    b.Property<int?>("VodicId")
                        .HasColumnName("VodicID");

                    b.HasKey("TerminPutovanjaId");

                    b.HasIndex("PutovanjeId");

                    b.HasIndex("SmjestajId");

                    b.HasIndex("VodicId");

                    b.ToTable("TerminiPutovanja");

                    b.HasData(
                        new { TerminPutovanjaId = 1, Aktivno = true, BrojMjesta = 40, Cijena = 10.0, DatumPolaska = new DateTime(2021, 2, 9, 0, 45, 6, 88, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 11, 0, 45, 6, 88, DateTimeKind.Local), PutovanjeId = 1, SmjestajId = 2, VodicId = 2 },
                        new { TerminPutovanjaId = 2, Aktivno = true, BrojMjesta = 30, Cijena = 150.0, DatumPolaska = new DateTime(2021, 2, 9, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 11, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 3, SmjestajId = 2, VodicId = 2 },
                        new { TerminPutovanjaId = 3, Aktivno = true, BrojMjesta = 40, Cijena = 50.0, DatumPolaska = new DateTime(2021, 2, 14, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 15, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 1, SmjestajId = 11, VodicId = 3 },
                        new { TerminPutovanjaId = 4, Aktivno = true, BrojMjesta = 12, Cijena = 44.0, DatumPolaska = new DateTime(2021, 2, 17, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 12, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 5, SmjestajId = 2, VodicId = 3 },
                        new { TerminPutovanjaId = 5, Aktivno = true, BrojMjesta = 50, Cijena = 130.0, DatumPolaska = new DateTime(2021, 2, 8, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 12, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 2, SmjestajId = 2, VodicId = 3 },
                        new { TerminPutovanjaId = 6, Aktivno = true, BrojMjesta = 50, Cijena = 130.0, DatumPolaska = new DateTime(2021, 2, 8, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 12, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 7, SmjestajId = 11, VodicId = 3 },
                        new { TerminPutovanjaId = 7, Aktivno = true, BrojMjesta = 40, Cijena = 25.0, DatumPolaska = new DateTime(2021, 2, 14, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 18, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 1, SmjestajId = 2, VodicId = 1 },
                        new { TerminPutovanjaId = 8, Aktivno = true, BrojMjesta = 40, Cijena = 25.0, DatumPolaska = new DateTime(2021, 2, 14, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 18, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 1, SmjestajId = 2, VodicId = 1 },
                        new { TerminPutovanjaId = 9, Aktivno = true, BrojMjesta = 55, Cijena = 250.0, DatumPolaska = new DateTime(2021, 2, 20, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 2, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 2, SmjestajId = 2, VodicId = 2 },
                        new { TerminPutovanjaId = 10, Aktivno = true, BrojMjesta = 50, Cijena = 330.0, DatumPolaska = new DateTime(2021, 3, 21, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 26, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 9, SmjestajId = 14, VodicId = 3 },
                        new { TerminPutovanjaId = 11, Aktivno = true, BrojMjesta = 50, Cijena = 120.0, DatumPolaska = new DateTime(2021, 4, 10, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 4, 15, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 8, SmjestajId = 15, VodicId = 4 },
                        new { TerminPutovanjaId = 12, Aktivno = true, BrojMjesta = 50, Cijena = 200.0, DatumPolaska = new DateTime(2021, 3, 16, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 24, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 10, SmjestajId = 13, VodicId = 1 },
                        new { TerminPutovanjaId = 13, Aktivno = true, BrojMjesta = 50, Cijena = 45.0, DatumPolaska = new DateTime(2021, 2, 19, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 2, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 11, SmjestajId = 2, VodicId = 2 },
                        new { TerminPutovanjaId = 14, Aktivno = true, BrojMjesta = 44, Cijena = 67.0, DatumPolaska = new DateTime(2021, 3, 26, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 30, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 12, SmjestajId = 2, VodicId = 3 },
                        new { TerminPutovanjaId = 15, Aktivno = true, BrojMjesta = 55, Cijena = 120.0, DatumPolaska = new DateTime(2021, 3, 3, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 10, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 13, SmjestajId = 15, VodicId = 3 },
                        new { TerminPutovanjaId = 1016, Aktivno = true, BrojMjesta = 33, Cijena = 40.0, DatumPolaska = new DateTime(2021, 2, 21, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 3, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 1, SmjestajId = 2, VodicId = 2 },
                        new { TerminPutovanjaId = 1017, Aktivno = true, BrojMjesta = 33, Cijena = 40.0, DatumPolaska = new DateTime(2021, 2, 22, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 3, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 1, SmjestajId = 2, VodicId = 2 },
                        new { TerminPutovanjaId = 1018, Aktivno = true, BrojMjesta = 4, Cijena = 4.0, DatumPolaska = new DateTime(2021, 2, 21, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 2, 22, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 1, SmjestajId = 2, VodicId = 3 },
                        new { TerminPutovanjaId = 1023, Aktivno = true, BrojMjesta = 44, Cijena = 5555.0, DatumPolaska = new DateTime(2021, 2, 23, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 3, 5, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 1, SmjestajId = 2, VodicId = 2 },
                        new { TerminPutovanjaId = 1025, Aktivno = true, BrojMjesta = 55, Cijena = 250.0, DatumPolaska = new DateTime(2021, 3, 26, 0, 45, 6, 89, DateTimeKind.Local), DatumPovratka = new DateTime(2021, 4, 2, 0, 45, 6, 89, DateTimeKind.Local), PutovanjeId = 6, SmjestajId = 12, VodicId = 5 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.TipPrevoza", b =>
                {
                    b.Property<int>("TipPrevozaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TipPrevozaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivTipa")
                        .IsRequired();

                    b.HasKey("TipPrevozaId");

                    b.ToTable("TipPrevoza");

                    b.HasData(
                        new { TipPrevozaId = 1, NazivTipa = "Autobus" },
                        new { TipPrevozaId = 2, NazivTipa = "Avion" },
                        new { TipPrevozaId = 3, NazivTipa = "Brod" }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Uplate", b =>
                {
                    b.Property<int>("UplataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UplataID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DatumUplate");

                    b.Property<float>("Iznos");

                    b.Property<int>("RezervacijaId")
                        .HasColumnName("RezervacijaID");

                    b.HasKey("UplataId");

                    b.HasIndex("RezervacijaId");

                    b.ToTable("Uplate");

                    b.HasData(
                        new { UplataId = 1, DatumUplate = new DateTime(2021, 2, 14, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 45f, RezervacijaId = 2 },
                        new { UplataId = 2, DatumUplate = new DateTime(2021, 2, 17, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 250f, RezervacijaId = 3 },
                        new { UplataId = 4, DatumUplate = new DateTime(2021, 2, 16, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 10f, RezervacijaId = 4 },
                        new { UplataId = 5, DatumUplate = new DateTime(2021, 2, 15, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 10f, RezervacijaId = 4 },
                        new { UplataId = 6, DatumUplate = new DateTime(2021, 2, 19, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 25f, RezervacijaId = 4 },
                        new { UplataId = 7, DatumUplate = new DateTime(2021, 2, 24, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 25f, RezervacijaId = 4 },
                        new { UplataId = 8, DatumUplate = new DateTime(2021, 2, 14, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 25f, RezervacijaId = 4 },
                        new { UplataId = 9, DatumUplate = new DateTime(2021, 2, 24, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 25f, RezervacijaId = 4 },
                        new { UplataId = 10, DatumUplate = new DateTime(2021, 2, 25, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 4f, RezervacijaId = 4 },
                        new { UplataId = 11, DatumUplate = new DateTime(2021, 2, 26, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 44f, RezervacijaId = 4 },
                        new { UplataId = 15, DatumUplate = new DateTime(2021, 2, 27, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 40f, RezervacijaId = 8 },
                        new { UplataId = 16, DatumUplate = new DateTime(2021, 2, 28, 0, 45, 6, 90, DateTimeKind.Local), Iznos = 30f, RezervacijaId = 4 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Vodici", b =>
                {
                    b.Property<int>("VodicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VodicID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ime");

                    b.Property<string>("Jmbg")
                        .HasColumnName("JMBG");

                    b.Property<string>("Kontakt");

                    b.Property<string>("Prezime");

                    b.Property<byte[]>("Slika");

                    b.Property<bool?>("Zauzet");

                    b.HasKey("VodicId");

                    b.ToTable("Vodici");

                    b.HasData(
                        new { VodicId = 1, Ime = "Amila", Jmbg = "1231231232321", Kontakt = "+062 71 485 300", Prezime = "Peco", Zauzet = true },
                        new { VodicId = 2, Ime = "Jasmin", Jmbg = "4324322423423", Kontakt = "+123 45 678 910", Prezime = "Azemovic", Zauzet = false },
                        new { VodicId = 3, Ime = "Elmir", Jmbg = "4324322423423", Kontakt = "+123 45 678 3", Prezime = "Babovic", Zauzet = false },
                        new { VodicId = 4, Ime = "Emina", Jmbg = "4324322423423", Kontakt = "+123 45 678 3", Prezime = "Junuz", Zauzet = false },
                        new { VodicId = 5, Ime = "Amila2", Jmbg = "4324322423423", Kontakt = "+123 45 678 3", Prezime = "Peco", Zauzet = false }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.VrstePutovanja", b =>
                {
                    b.Property<int>("VrstaPutovanjaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("VrstaPutovanjaID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Oznaka")
                        .HasMaxLength(10);

                    b.Property<int?>("Vrijednost");

                    b.HasKey("VrstaPutovanjaId");

                    b.ToTable("VrstePutovanja");

                    b.HasData(
                        new { VrstaPutovanjaId = 4, Oznaka = "Evropsko", Vrijednost = 1 },
                        new { VrstaPutovanjaId = 5, Oznaka = "Jadran", Vrijednost = 2 },
                        new { VrstaPutovanjaId = 6, Oznaka = "Mediteran", Vrijednost = 3 },
                        new { VrstaPutovanjaId = 7, Oznaka = "Školsko", Vrijednost = 4 }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Zaposlenici", b =>
                {
                    b.Property<int>("ZaposlenikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ZaposlenikID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Kontakt")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("KorisnickoIme")
                        .HasMaxLength(50);

                    b.Property<string>("LozinkaHash");

                    b.Property<string>("LozinkaSalt");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("ZaposlenikId");

                    b.ToTable("Zaposlenici");

                    b.HasData(
                        new { ZaposlenikId = 1, Email = "alem.peco@edu.fit.ba", Ime = "Alem", Kontakt = "svakikon", KorisnickoIme = "alem", LozinkaHash = "Hkygp3aJFIgOMtbHckDaXN5HYBA=", LozinkaSalt = "DMUTs++b9XRsy8TQxXWtzw==", Prezime = "Peco" }
                    );
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Gradovi", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.Drzave", "Drzave")
                        .WithMany("Gradovi")
                        .HasForeignKey("DrzaveId")
                        .HasConstraintName("FK_Gradovi_Drzave");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Komentari", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.PutniciKorisnici", "PutnikKorisnik")
                        .WithMany("Komentari")
                        .HasForeignKey("PutnikKorisnikId")
                        .HasConstraintName("FK_Komentari_PutniciKorisnici");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.Putovanja", "Putovanje")
                        .WithMany("Komentari")
                        .HasForeignKey("PutovanjeId")
                        .HasConstraintName("FK_Komentari_Putovanja");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Novosti", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.Putovanja", "Putovanje")
                        .WithMany("Novosti")
                        .HasForeignKey("PutovanjeId")
                        .HasConstraintName("FK_Novosti_Putovanja");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.Zaposlenici", "Zaposlenik")
                        .WithMany("Novosti")
                        .HasForeignKey("ZaposlenikId")
                        .HasConstraintName("FK_Novosti_Zaposlenici");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.OcjenePutovanja", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.Ocjene", "Ocjena")
                        .WithMany("OcjenePutovanja")
                        .HasForeignKey("OcjenaId")
                        .HasConstraintName("FK_OcjenePutovanja_Ocjene");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.PutniciKorisnici", "PutnikKorisnik")
                        .WithMany("OcjenePutovanja")
                        .HasForeignKey("PutnikKorisnikId")
                        .HasConstraintName("FK_OcjenePutovanja_PutniciKorisnici");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.Putovanja", "Putovanje")
                        .WithMany("OcjenePutovanja")
                        .HasForeignKey("PutovanjeId")
                        .HasConstraintName("FK_OcjenePutovanja_Putovanja");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Pretplate", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.PutniciKorisnici", "PutnikKorisnik")
                        .WithMany("Pretplate")
                        .HasForeignKey("PutnikKorisnikId")
                        .HasConstraintName("FK_Pretplate_PutniciKorisnici");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.VrstePutovanja", "VrstaPutovanja")
                        .WithMany("Pretplate")
                        .HasForeignKey("VrstaPutovanjaId")
                        .HasConstraintName("FK_Pretplate_VrstePutovanja");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Prevoz", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.Firme", "Firma")
                        .WithMany("Prevoz")
                        .HasForeignKey("FirmaId")
                        .HasConstraintName("FK_Prevoz_Firma");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.TipPrevoza", "TipPrevoza")
                        .WithMany("Prevoz")
                        .HasForeignKey("TipPrevozaId")
                        .HasConstraintName("FK_Prevoz_TipPrevoza");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Putovanja", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.Gradovi", "Grad")
                        .WithMany("Putovanja")
                        .HasForeignKey("GradId")
                        .HasConstraintName("FK_Putovanja_Gradovi");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.Prevoz", "Prevoz")
                        .WithMany("Putovanja")
                        .HasForeignKey("PrevozId")
                        .HasConstraintName("FK_Putovanja_");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.VrstePutovanja", "VrstaPutovanja")
                        .WithMany("Putovanja")
                        .HasForeignKey("VrstaPutovanjaId")
                        .HasConstraintName("FK_Putovanja_VrstePutovanja");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.Zaposlenici", "Zaposlenik")
                        .WithMany("Putovanja")
                        .HasForeignKey("ZaposlenikId")
                        .HasConstraintName("FK_Putovanja_Zaposlenici");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Rezervacije", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.PutniciKorisnici", "PutnikKorisnik")
                        .WithMany("Rezervacije")
                        .HasForeignKey("PutnikKorisnikId")
                        .HasConstraintName("FK_PutniciKorisniciPutovanja_PutniciKorisnici_PutnikKorisnikID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TuristickaAgencijaWebAPI.Database.TerminiPutovanja", "TerminPutovanja")
                        .WithMany("Rezervacije")
                        .HasForeignKey("TerminPutovanjaId")
                        .HasConstraintName("FK_Rezervacije_TerminiPutovanja");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Smjestaj", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.Gradovi", "Grad")
                        .WithMany("Smjestaj")
                        .HasForeignKey("GradId")
                        .HasConstraintName("FK_Smjestaj_Gradovi");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.TerminiPutovanja", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.Putovanja", "Putovanje")
                        .WithMany("TerminiPutovanja")
                        .HasForeignKey("PutovanjeId")
                        .HasConstraintName("FK_TerminiPutovanja_Putovanja");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.Smjestaj", "Smjestaj")
                        .WithMany("TerminiPutovanja")
                        .HasForeignKey("SmjestajId")
                        .HasConstraintName("FK_TerminiPutovanja_Smjestaj");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.TerminiPutovanja", "TerminPutovanja")
                        .WithOne("InverseTerminPutovanja")
                        .HasForeignKey("TuristickaAgencijaWebAPI.Database.TerminiPutovanja", "TerminPutovanjaId")
                        .HasConstraintName("FK_TerminiPutovanja_TerminiPutovanja");

                    b.HasOne("TuristickaAgencijaWebAPI.Database.Vodici", "Vodic")
                        .WithMany("TerminiPutovanja")
                        .HasForeignKey("VodicId")
                        .HasConstraintName("FK_TerminiPutovanja_Vodici");
                });

            modelBuilder.Entity("TuristickaAgencijaWebAPI.Database.Uplate", b =>
                {
                    b.HasOne("TuristickaAgencijaWebAPI.Database.Rezervacije", "Rezervacija")
                        .WithMany("Uplate")
                        .HasForeignKey("RezervacijaId")
                        .HasConstraintName("FK_Uplate_Rezervacije");
                });
#pragma warning restore 612, 618
        }
    }
}
